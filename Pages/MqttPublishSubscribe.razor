@page "/mqtt"
@using MQTTManager.DB.Model;
@using MQTTManager.Services;
@using MQTTnet;
@using System.Text;
@using MQTTnet.Packets;

@inject AppState AppState
@inject IMqttBrokerService MQTTService

<PageTitle>Publish/Subscribe MQTT</PageTitle>
<div Style="display: flex; float:right;">
    <MudTooltip Text="Rozwiń dodatkowe ustawienia" Placement="Placement.Right" Arrow="true">
        <MudIconButton OnClick="@((e) => OpenDrawer())" Size="Size.Large" Color="Color.Warning" Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" />
    </MudTooltip>
</div>

<MudGrid>
    <MudItem xs="12" visible="@_public">
        <MudStack>
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudAvatar Color="Color.Success" Size="Size.Large">P</MudAvatar>
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">Publikuj</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
            <MudPaper Class="pa-4">
                <MudStack Spacing="4">
                    <MudForm Disabled="Disabled">
                        <MudTextField T="string" Label="Topic" Required />
                        <MudTextField T="string" Label="Payload" Required />
                        <MudNumericField T="int" Label="QoS" Required />
                    </MudForm>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Warning">Wyślij</MudButton>
                </MudStack>
            </MudPaper>
        </MudStack>
    </MudItem>

    <MudItem sm="3" visible="@_subscribe">
        <MudStack>
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudAvatar Color="Color.Success" Size="Size.Large">S</MudAvatar>
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">Subskrybuje</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
            @foreach (var sub in subscribe)
            {
                <MudPaper Class="pa-4">
                    <MudStack Spacing="4">
                        <MudTextField T="string" Label="Topic" Value="sub.BaseMessage.Topic" ReadOnly />
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    </MudItem>

    <MudItem sm="6" visible="@_message">
        <MudStack>
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudAvatar Color="Color.Warning" Size="Size.Large">W</MudAvatar>
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">Wiadomości</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
            @foreach (var message in brokerMessages)
            {
                <MudPaper Class="pa-4">
                    <MudStack Spacing="4">
                        <MudTextField T="string" Label="Topic" Value="@message.BaseMessage.Topic" ReadOnly />
                        <MudTextField T="string" Label="Payload" Value="@Encoding.UTF8.GetString(message.BaseMessage.PayloadSegment)" ReadOnly />
                        <MudStack Row="true">
                            <MudTextField T="string" Label="Quality" Value="@message.BaseMessage.QualityOfServiceLevel.ToString()" ReadOnly />
                            @if (message.BaseMessage.UserProperties != null)
                            {
                                <MudTextField T="string" Label="Client" Value="@message.BaseMessage.UserProperties.Where(u => u.Name == "Client").First().Value" ReadOnly />
                            }
                        </MudStack>
                        <MudTextField T="string" Label="Date" Value="@message.MessageDate.ToString()" ReadOnly />
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    </MudItem>

    <MudItem sm="3" visible="@_nosubscribe">
        <MudStack>
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudAvatar Color="Color.Surface" Size="Size.Large">N</MudAvatar>
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">Nie subskrybuje</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
            @foreach (var nosub in notsubscribe)
            {
                <MudPaper Class="pa-4">
                    <MudStack Spacing="4">
                        <MudTextField T="string" Label="Topic" Value="nosub" />
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" DisableElevation="true">Dodaj</MudButton>
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    </MudItem>
</MudGrid>


<MudDrawer @bind-Open="@open" Width="300px" Height="100%" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary" Style="opacity: 0.9;">
    <MudDrawerHeader>
        <MudTooltip Text="Zwiń" Placement="Placement.Right" Arrow="true">
            <MudIconButton OnClick="@((e) => OpenDrawer())" Size="Size.Medium" Color="Color.Warning" Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight">Zwiń</MudIconButton>
        </MudTooltip>
        <MudSpacer />
    </MudDrawerHeader>
    <MudNavMenu>
        <MudCheckBox @bind-Checked="_public" Label="Wyświetlaj 'Publikuj'" Color="Color.Warning" />
        <MudCheckBox @bind-Checked="_message" Label="Wyświetlaj 'Wiadomości'" Color="Color.Warning" />
        <MudCheckBox @bind-Checked="_subscribe" Label="Wyświetlaj 'Subskrybuje'" Color="Color.Warning" />
        <MudCheckBox @bind-Checked="_nosubscribe" Label="Wyświetlaj 'Nie subskrybuje'" Color="Color.Warning" />
    </MudNavMenu>
</MudDrawer>

@code {
    bool open = false;
    bool _public = true;
    bool _message = true;
    bool _subscribe = true;
    bool _nosubscribe = true;

    List<MqttMessage> subscribe = new List<MqttMessage>();
    List<string> notsubscribe = new List<string>();
    List<MqttMessage> brokerMessages = new List<MqttMessage>();

    void OpenDrawer()
    {
        open = !open;
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.OnBrokerChanged += UpdateUI;
        brokerMessages = MQTTService.GetAllMessages().Result;
        notsubscribe = brokerMessages.GroupBy(b => b.BaseMessage.Topic).Select(group => group.Key).ToList();
    }

    private async void UpdateUI()
    {
        brokerMessages = MQTTService.GetAllMessages().Result;
        notsubscribe = brokerMessages.GroupBy(b => b.BaseMessage.Topic).Select(group => group.Key).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppState.OnBrokerChanged -= UpdateUI;
    }
}
