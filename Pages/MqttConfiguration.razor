@page "/mqttconfiguration"
@using MQTTManager.DB.Model;
@using MQTTManager.DB.Model.Enum;
@using MQTTManager.Dialogs;
@using MQTTManager.Services;

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IBrokerConfigurationService ConfigurationService
@inject IMqttBrokerService MQTTService
@inject AppState AppState

<PageTitle>Konfiguracja MQTT</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem md="6">
        <MudSimpleTable Breakpoint="Breakpoint.Sm" Elevation="3">
            <thead>
                <MudTh>Nazwa</MudTh>
                <MudTh>Port</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Sterowanie</MudTh>
            </thead>
            <tbody>
                <MudTd>@defaultBrokerConfig.Name</MudTd>
                <MudTd>@defaultBrokerConfig.Port</MudTd>
                <MudTd>@brokerStatus</MudTd>
                @if (defaultBrokerConfig != null)
                {
                    <MudTd>
                        <MudTooltip Arrow="true" Text="Wystartuj broker">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Success" Class="hover:mud-success-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.PlayArrow" Size="Size.Small" OnClick="@(() => StartBroker())"></MudFab>
                        </MudTooltip>
                        <MudTooltip Arrow="true" Text="Resetuj broker">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Info" Class="hover:mud-info-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.RestartAlt" Size="Size.Small" OnClick="@(() => RestartBroker())"></MudFab>
                        </MudTooltip>
                        <MudTooltip Arrow="true" Text="Zatrzymaj broker">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Error" Class="hover:mud-error-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.Stop" Size="Size.Small" OnClick="@(() => StopBroker())"></MudFab>
                        </MudTooltip>
                    </MudTd>
                }
            </tbody>
        </MudSimpleTable>
    </MudItem>
    <MudItem md="12" sm="12">
        <MudTable Items="@configurationsList" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudButton OnClick="@AddNewBrokerConfigDialog" Variant="Variant.Filled" Color="Color.Warning" Class="ml-auto mb-2">Dodaj nową konfigurację</MudButton>
                @*<MudSpacer />*@
                @*<MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nazwa</MudTh>
                <MudTh>Port</MudTh>
                <MudTh>Autoryzacja</MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Port">@context.Port</MudTd>
                <MudTd DataLabel="Authorization">@context.Authorization</MudTd>
                <MudTd>

                    <MudStack Row="true">
                        <MudTooltip Arrow="true" Text="Edytuj konfigurację">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Warning" Class="hover:mud-warning-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.Edit" Size="Size.Small" OnClick="@(() => EditBrokerConfigDialog(@context))"></MudFab>
                        </MudTooltip>
                        <MudTooltip Arrow="true" Text="Usuń konfigurację">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Error" Class="hover:mud-error-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.Delete" Size="Size.Small" OnClick="@(() => Delete(@context.Id))"></MudFab>
                        </MudTooltip>
                        @if (context.Default == false)
                        {
                            <MudTooltip Arrow="true" Text="Ustaw jako domyślny">
                                <MudFab Style="width: 35px;height: 30px" IconColor="Color.Success" Class="hover:mud-success-hover" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.CheckCircleOutline" Size="Size.Small" OnClick="@(() => SetAsDefault(@context.Id))"></MudFab>
                            </MudTooltip>
                        }
                        @*@if (context.Authorization != AuthorizationTypes.NONE)
                        {
                        <MudTooltip Arrow="true" Text="Ustaw autoryzacje">
                        <MudFab Style="width: 35px;height: 30px" IconColor="Color.Info" Class="hover:mud-info-hover" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.Key" Size="Size.Small" OnClick="@(() => SetAuthorization(@context))"></MudFab>
                        </MudTooltip>
                        }*@
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>Brak wyników do wyświetlenia</MudText>
            </NoRecordsContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" InfoFormat="@($"{infoFormat}")" HorizontalAlignment="HorizontalAlignment.End" />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
@code {
    private List<BrokerConfigurationModel> configurationsList = new List<BrokerConfigurationModel>();
    private BrokerConfigurationModel defaultBrokerConfig = new BrokerConfigurationModel();

    private IEnumerable<BrokerConfigurationModel> pagedData;
    private MudTable<BrokerConfigurationModel> table;

    private bool _loading = false;
    private int totalItems;
    private string searchString = null;
    private StateTypes brokerStatus = StateTypes.STOPPED;

    private string infoFormat = "{first_item}-{last_item} of {all_items}";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        configurationsList = await ConfigurationService.GetBrokerConfigurationList();
        defaultBrokerConfig = await ConfigurationService.GetDefaultBrokerConfiguration();
        _loading = false;
        AppState.OnBrokerStatus += UpdateUI;
    }

    private async Task AddNewBrokerConfigDialog()
    {
        var dialogOptions = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                Position = DialogPosition.Center,
                DisableBackdropClick = true,
                CloseOnEscapeKey = true,
                FullWidth = true
            };

        var parameters = new DialogParameters();
        parameters.Add("brokerConfig", new BrokerConfigurationModel());
        parameters.Add("addingDialog", true);

        var result = await DialogService.Show<AddEditBrokerConfigurationDialog>("Dodaj nową konfiguracje", parameters, dialogOptions).Result;

        if (!result.Cancelled)
        {
            await ReloadData();
        }
    }

    private async Task EditBrokerConfigDialog(BrokerConfigurationModel broker)
    {
        var dialogOptions = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                Position = DialogPosition.Center,
                DisableBackdropClick = true,
                CloseOnEscapeKey = true,
                FullWidth = true
            };

        var parameters = new DialogParameters();
        parameters.Add("brokerConfig", broker);
        parameters.Add("addingDialog", false);

        var result = await DialogService.Show<AddEditBrokerConfigurationDialog>("Dodaj nową konfiguracje", parameters, dialogOptions).Result;

        if (!result.Cancelled)
        {
            await ReloadData();
        }
    }

    private async Task Delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
         "Czy na pewno chcesz usunąć konfigurację?",
         "",
         yesText: "Tak", cancelText: "Anuluj");
        if (result != null)
        {
            if (await ConfigurationService.RemoveBrokerConfigurationById(id))
            {
                await InvokeAsync(StateHasChanged);
                Snackbar.Add("Usunięto konfiguracje", Severity.Success);
            }
            else
            {
                Snackbar.Add("Nie usunięto konfiguracji", Severity.Error);
            }
        }
    }

    private async Task SetAsDefault(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
         "Czy chcesz ustawiś konfigurację jako domyślną?",
         "Poprzednia konfiguracja zostanie zmieniona a broker zatrzymany jeśli był uruchomiony.",
         yesText: "Tak", cancelText: "Anuluj");
        if (result != null)
        {
            if (await ConfigurationService.SetAsDefaultBrokerConfigurationById(id))
            {
                await StopBroker();
                await ReloadData();
                Snackbar.Add("Ustawiono nową domyślną konfigurację", Severity.Success);
            }
            else
            {
                Snackbar.Add("Wystąpił problem przy zmianie konfiguracji", Severity.Error);
            }
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task StartBroker()
    {
        await MQTTService.StartBrokerAsync(defaultBrokerConfig);
    }

    private async Task StopBroker()
    {
        await MQTTService.StopBrokerAsync();
    }

    private async Task RestartBroker()
    {
        await MQTTService.RestartBrokerAsync(defaultBrokerConfig);
    }

    private async void UpdateUI()
    {
        brokerStatus = AppState.BrokerStatus;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReloadData()
    {
        _loading = true;
        configurationsList = await ConfigurationService.GetBrokerConfigurationList();
        defaultBrokerConfig = await ConfigurationService.GetDefaultBrokerConfiguration();
        _loading = false;
    }

    public void Dispose()
    {
        AppState.OnBrokerStatus -= UpdateUI;
    }
}
