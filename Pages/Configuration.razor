@page "/configuration"
@using MQTTManager.DB.Model;
@using MQTTManager.DB.Model.Enum;
@using MQTTManager.Services;

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IBrokerConfigurationService ConfigurationService

<PageTitle>Konfiguracja</PageTitle>

<MudGrid>
    <MudItem md="12" sm="12">
        <MudText Typo="Typo.h6">Dodaj nową konfigurację brokera</MudText>
    </MudItem>
    <MudItem md="4" sm="12">
        <MudTextField T="string" @bind-Value="brokerConfig.Name" Label="Nazwa" Required="true"></MudTextField>
    </MudItem>
    <MudItem md="4" sm="12">
        <MudNumericField T="int" @bind-Value="brokerConfig.Port" Label="Port" Required="true"></MudNumericField>
    </MudItem>
    <MudItem md="4" sm="12">
        <MudSelect @bind-Value="brokerConfig.Authorization" Label="Typ autoryzacji" Required="true">
            <MudSelectItem Value="AuthorizationTypes.TOKEN" />
            <MudSelectItem Value="AuthorizationTypes.NORMAL" />
            <MudSelectItem Value="AuthorizationTypes.NONE" />
        </MudSelect>
    </MudItem>
    <MudItem md="2" sm="12">
        <MudButton OnClick="Cancel" Class="mb-2">Anuluj</MudButton>
    </MudItem>
    <MudItem md="8" sm="12"></MudItem>
    <MudItem md="2" sm="12">
        <MudButton OnClick="Submit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" Class="ml-auto mb-2">Dodaj</MudButton>
    </MudItem>

    <MudItem md="12" sm="12">
        <MudTable ServerData="@(new Func<TableState, Task<TableData<BrokerConfigurationModel>>>(ServerReload))"
                  Dense="true" Hover="true" @ref="table" GroupBy="@_groupDefinition"
                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                  GroupFooterClass="mb-4">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Lista konfiguracji brokera</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                @if (_groupDefinition.Expandable)
                {
                    <col style="width: 60px;" />
                }
                <col />
                <col />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="name_field" T="BrokerConfigurationModel">Nazwa</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="port_field" T="BrokerConfigurationModel">Port</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="auth_field" T="BrokerConfigurationModel">Autoryzacja</MudTableSortLabel></MudTh>
                <MudTh>Akcje</MudTh>
            </HeaderContent>

            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group" colspan="5">
                    @if((bool)context.Key)
                    {
                        <text>Domyślne</text>
                    }
                    else
                    {
                        <text>Pozostałe</text>
                    }
                </MudTh>
            </GroupHeaderTemplate>

                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Port">@context.Port</MudTd>
                    <MudTd DataLabel="Authorization">@context.Authorization</MudTd>
                    <MudTd>
                        <MudTooltip Arrow="true" Text="Edytuj konfigurację">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Warning" Class="hover:mud-warning-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.Edit" Size="Size.Small" OnClick="@(() => Edit(@context.Id))"></MudFab>
                        </MudTooltip>
                        <MudTooltip Arrow="true" Text="Usuń konfigurację">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Error" Class="hover:mud-error-hover" IconSize="Size.Small" StartIcon="@Icons.Filled.Delete" Size="Size.Small" OnClick="@(() => Delete(@context.Id))"></MudFab>
                        </MudTooltip>
                        @if (context.Default == false)
                    {
                        <MudTooltip Arrow="true" Text="Ustaw jako domyślny">
                            <MudFab Style="width: 35px;height: 30px" IconColor="Color.Success" Class="hover:mud-success-hover" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.CheckCircleOutline" Size="Size.Small" OnClick="@(() => SetAsDefault(@context.Id))"></MudFab>
                        </MudTooltip>
                    }
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>Brak wyników do wyświetlenia</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
@code {
    private List<BrokerConfigurationModel> configurationsList = new List<BrokerConfigurationModel>();
    private BrokerConfigurationModel brokerConfig = new BrokerConfigurationModel();

    private IEnumerable<BrokerConfigurationModel> pagedData;
    private MudTable<BrokerConfigurationModel> table;

    private int totalItems;
    private string searchString = null;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(brokerConfig.Name) || brokerConfig.Port == 0)
        {
            Snackbar.Add("Podaj prawidłowe dane do konfiguracji", Severity.Warning);
            return;
        }

        if (configurationsList.Contains(brokerConfig))
        {
            Snackbar.Add("Podobna konfiguracja istnieje", Severity.Warning);
            return;
        }

        if (await ConfigurationService.AddBrokerConfiguration(brokerConfig))
        {
            Cancel();
            table.ReloadServerData();
            Snackbar.Add("Dodano nową konfiguracje", Severity.Success);
        }
        else
        {
            Snackbar.Add("Nie dodano nowej konfiguracji", Severity.Error);
        }
    }

    private async Task Edit(int id)
    {

    }

    private async Task Delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
         "Czy na pewno chcesz usunąć konfigurację?",
         "",
         yesText: "Tak", cancelText: "Anuluj");
        if (result != null)
        {
            if (await ConfigurationService.RemoveBrokerConfigurationById(id))
            {
                Cancel();
                table.ReloadServerData();
                Snackbar.Add("Usunięto konfiguracje", Severity.Success);
            }
            else
            {
                Snackbar.Add("Nie usunięto konfiguracji", Severity.Error);
            }
        }
    }

    private async Task SetAsDefault(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
         "Czy chcesz ustawiś konfigurację jako domyślną?",
         "Poprzednia konfiguracja zostanie zmieniona a broker zatrzymany jeśli był uruchomiony.",
         yesText: "Tak", cancelText: "Anuluj");
        if (result != null)
        {
            if (await ConfigurationService.SetAsDefaultBrokerConfigurationById(id))
            {
                Cancel();
                table.ReloadServerData();
                Snackbar.Add("Ustawiono nową domyślną konfigurację", Severity.Success);
            }
            else
            {
                Snackbar.Add("Wystąpił problem przy zmianie konfiguracji", Severity.Error);
            }
        }
    }

    private async Task Cancel()
    {
        brokerConfig = new BrokerConfigurationModel();
    }

    private TableGroupDefinition<BrokerConfigurationModel> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.Default
        };

    private async Task<TableData<BrokerConfigurationModel>> ServerReload(TableState state)
    {
        configurationsList = await ConfigurationService.GetBrokerConfigurationList();

        IEnumerable<BrokerConfigurationModel> data = configurationsList;
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Id} {element.Name} {element.Port}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "port_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Port);
                break;
            case "auth_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Authorization);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<BrokerConfigurationModel>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
