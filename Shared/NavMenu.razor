@using MQTTManager.Services;

@inject AppState AppState

<MudNavMenu Color="Color.Warning" Class="d-flex justify-space-around flex-wrap mt-4" >
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="mqttconfiguration" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.DisplaySettings">Konfiguracja MQTT</MudNavLink>
    <MudNavLink Href="mqtt" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Public">
        Pub/Sub <MudBadge Content="@messagesCount" Color="Color.Warning" Overlap="false" Class="ml-1" />
    </MudNavLink>
    <MudNavLink Href="mqttclients" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People">
        Klienci MQTT <MudBadge Content="@clientsCount" Color="Color.Warning" Overlap="false" Class="ml-1" />
    </MudNavLink>
    <MudNavLink Href="console" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Logi</MudNavLink>
</MudNavMenu>

@code {
    int clientsCount = 0;
    int messagesCount = 0;

    protected override async Task OnInitializedAsync()
    {
        AppState.OnBrokerChanged += UpdateUI;
        clientsCount = AppState.ConnectedUsersCount;
        messagesCount = AppState.BrokerMessagesCount;
    }

    private async void UpdateUI()
    {
        messagesCount = AppState.BrokerMessagesCount;
        clientsCount = AppState.ConnectedUsersCount;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppState.OnBrokerChanged -= UpdateUI;
    }
}